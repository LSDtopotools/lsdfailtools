#############
FORESEE workflow
#############

###############
1. Process topography
	1.1. Produce dem and slope in epsg32633 - DONE with the ASTER DEM 
	1.2. Produce dem and slope in epsg32632 - DONE with the ASTER DEM 

###############
2. Download and process rainfall data - DONE
	2.1. Download and process between InSAR coverage dates - DONE
	2.2. Download and process between InSAR+Sentinal coverage dates - DONE

###############
3. Assess quality of terrestrial data - DONE => it is shit (but feel free to have another look at it)

###############
4. Process InSAR data // Sentinel+InSAR data
	4.1. write script to identify the time of failure (which is the output of the iverson model) - DONE
	NOTE: I initially considered failure to occur when displacement velocity exceeded a fixed threshold. Now I'm having second thoughts and I believe there is a better way.
	NOTE (cont'd): better options include:
		a. characterising failure by acceleration
		b. detrending velocity over the DEM
		c. asking the Italians what matters for them
		d. matching acceleration events with rainfall episodes

###############
5. Calibrate iverson model
	5.1. Write script to calibrate a fixed number of points semi-randomly (higher chance of calibration closer to the road) - DONE
	5.2. Write script to to show sensitivity of calibration to missing input time-dependant data => groundwater depth!!!! - NOT DONE
	5.3. Integrate geological data to better constrain soil/sediment parameters - NOT DONE

###############
6. Validate iverson model
	6.1. write script to estimate the number of points that can be validated - DONE (needs reviewing)
	6.2. is the model well calibrated? NO

###############
7. Make nice plots of relevant outputs - NOT DONE
	7.1. plot location and proportion of pixels for which the chosen calibration correctly predicts failures observed on InSAR data
	7.2. plot miminum rainfall to cause failure 
		7.2.1. Prepare incremental artificial rainstorm time series.
	7.3. the same with rainfall return period
	7.4. the same but with conditions on groundwater depth
	7.5. the famous (and risky) red/orange/green hazard map


#############################
Other outputs:
- Rainfall grabber package
- Work on ground saturation?

MAKE SOME ACTUAL PYTHON PACKAGES! - THIS WEEK!


#############################
Notes from phone call:

Point of the meeting: rainfall sensor!

Telespazio wants to test a new rainfall sensor.
Eugenio Realini: infos about sensor.
It's a GNSS sensor: the perturbation caused in the line of sight by vapour and rainfall yields an estimate of weather conditions.

They are thinking about future rainfall estimates to model landslides.
Apparently, this will be able to produce high precision rainfall predictions

They want to put in a GNSS/water vapour sensor on the bridge of "our" site. It does require quite a bit of assimilation to build it into a weather model.

DO WE HAVE THIS ASSIMILATION CAPACITY?

the idea is to include the GNSS data into FORESEE. But for what? they are so sparse ....

GReD can give them water vapour timeseries, but that's it. The rainfall model needs to come from someone else.

types of landslides:
Shallow: caused by intense rainfall

The problem for us is timing the landslide.

Potential for soil moisture sensors up to 1.5m depth !!!!!

WP1: they have better temporal resolution form sentinel

Get the link to FORESEE data hub !!!!! !!!!!!!! YAY!

They will install the sensor!

############################



# MC produces a .csv recording the times of failure for the parameters tested.

# For us, it will correspond to the first failure (because that is the one we get with a known slope value)

# for each pixel, we can run an MC simulation to identify parameters that give a failure in between insar measurements (if a pixel fails for several insar datasets, this can help constrain the date).

# Hence, we must first define the interval of failure (considering all 3 failure "directions").
# THAT IS A CRUCIAL FIRST STEP - DONE- there is a bil file with all failure and prefailure times

# Combine the failures between A, D and EWV?  that would serve to constrain the interval of failure - DONE!

# Calibration

Run the cool python module Boris made












# Note that this interval of failure will apply to various failure velocity thresholds. These thresholds can actually be a user-defined input: when to people consider landslides to be unsafe?

# Note: calibration is loooong: choose a select group of groups of nodes!

# Then use the MC to find that parameters that give a failtime inside the interval. (this stuff might be easier/faster with Genetic Algorithms, but MC is probs better to explore all the parameter space).