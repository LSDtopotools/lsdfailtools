:numbered:


== Preprocessing the precipitation data

Precipitation data drives the transient pore pressure model. The data can be from local instruments, global datasets or simulations. The data needs to be in a `csv` (Comma-separated-values) files containing the following columns:

[source,csv]
----
duration_s,intensity_mm_sec
...,...
----

Where `duration_s` represent a duration in seconds and `intensity_mm_sec` is the corresponding precipitation intensity in mm per seconds. The intensity column usually requires unit conversion from common datasets. For example, `15 mm` of rain in 3 hours becomes `15/10800=0.001389 mm/second`.

== Running the model for a single soil column

The following instructions describe how to run the code and visualise the output for a single soil column simulated.

=== Simulation

Once compiled, the pass:[C++] executable can be run from the command-line and need to be directed to a *parameter file*.
The *parameter file* is a text file containing a series of values telling the pass:[C++] model what parameters to use. 
The parameter files can be written as follow in a text file:

[source, parameter file]
----
# This is a parameter file for the Iverson model
# Lines beginning with # are comments and are not read by the software

# The read path is where the data will be read
read path: /path/to/file/
# The write path is where the data will be written
write path: /path/to/file/
# Write fname is the prefix of the written files
write fname: 20150711_20160809_filtered

# Name of the csv file containing the preprocessed precipitation data
rainfall_csv: preprocessed_data.csv

# Parameters for the models
# See documentation for units
D_0: 0.000005
K_sat: 0.00000005
d: 2
Iz_over_K_steady: 0.2
alpha: 0.51
friction_angle: 0.38
cohesion: 12000
weight_of_soil: 19000
weight_of_water: 9800
depth_spacing: 0.1
n_depths: 35


#end of file
----

The executable needs to know the path and the name of the parameter file to read them correctly. 
From a terminal in the folder containing the compiled executable, the following command will run the model:

[source,console]
----
./iverson_model.exe /path/to/the/parameter/file/ name_of_the_parameter_file.param
----

Note that the parameter file is a text file and can be saved with any extensions (e.g., `.param`, `.driver`). The following parameters can be provided to the model.

|=======
|_Parameter_ |_Description_ | _Units_
|rainfall_csv | the name of the preprocessed `csv` file with the rainfall time series. | none
|D_0 | Hydraulic diffusivity | m^2^/s
|K_sat | Hydraulic conductivity | m/s
|d |Depth of water table | metres
|Iz_over_K_steady |Steady-state infiltration rate | dimensionless
|alpha |Topographic slope | radians
|friction_angle |Critical friction angle for the soil | radians
|cohesion |Soil cohesion | Pa
|weight_of_soil |Volumic weight of the soil | kg/(s*m^2^)
|weight_of_water |Columic weight of the water | kg/(s*m^2^)
|depth_spacing |Model resolution | metres
|n_depths |Number of discretisation| nondimensional integer
|=======


=== Model outputs

The pass:[C++] model produces 6 `csv` files containing the evolution of various characteristics of the soil column. 
Four csv files contain the time series of the different components of the Factor of Safety (FS) functions of time and depth. 
The independent components of FS are described in equations 28 (a,b and c) of Iverson (2000) and their time series are in files `XXX_time_series_depth_Fcomp.csv` , where `XXX` is the `write fname` in the parameter file and `Fcomp` the corresponding component. 
These files have the extensions `F_c.csv`, `F_f.csv`, `F_w.csv`, `FS.csv`. The Factor of Safety is in the last of these files. 
There is also a file with the extension `Psi.csv` which contains the pressure head (in metres).

* All of these files have the depths below the surface in the first column
* All subsequent columns the value of the parameter in question (e.g., FS, or Psi) at a single time.

The final file has the extension `_potfailfile.csv`.
This has 4 columns. The first is the time of failure, the second is the minimum depth of failure (i.e., the minimum depth where FS < 1) and the third is the maximum depth of failure (the maximum depth where FS < 1). The last column is simply 1 if there is failure. 
Data of -9999 with no other rows only indicates that the slope never fails. 


=== Spatial analysis

Each model run predicts the evolution of the factor of safety for a single soil column through time. Once a time has been identified, a raster can be fed to the model to generate a risk map. The raster will be downsampled, the slope will be calculated and factor of safety is calculated for each soil column. The following lines can be added to the parameter file to enable the spatial analysis:

[source, parameter file]
----
full_1D_output: false
spatial_analysis: true
reload_alpha: false
resample_slope: true
resample_slope_res: 6
topo_raster: insar_area_PP
polyfit_window_radius: 1
n_threads: 4
time_of_spatial_analysis: 19818000
----

Where:

* `full_1D_output: false` disables printing of full time series information of the entire depth profile.
* `spatial_analysis: true` enables the analysis.
* `reload_alpha: false` enables (true) or disables (false) the reloading of previously calculated slope map.
* `resample_slope` determines if the raster is down-sampled before slope calculation (for speed purposes) with a new resolution.
* `resample_slope_res` is the resolution of the resampled DEM
* `topo_raster` is the name of the DEM/DTM raster without its extension (it has to be an ENVI bil file). 
* `polyfit_window_radius` is radius of the polynomial fitting window that is used to calculate slope gradient.
* `n_threads` is the number of threads to use for multithreading.
* `time_of_spatial_analysis` is the selected time in the precipitation time series. It produces a raster with the factor of safety for each soil column.

Note that most users will want to first run a 1D analysis to select the time of interest to produce the spatial map of the Factor of Safety (FS).

